# Copyright (c) 2014 Adafruit Industries
# Author: Tony DiCola
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
import sys
import time

import Adafruit_MPR121.MPR121 as MPR121
import pygame.mixer

print('Starting Music Box')

# Create MPR121 instance.
cap = MPR121.MPR121()

# Initialize communication with MPR121 using default I2C bus of device, and
# default I2C address (0x5A).  On BeagleBone Black will default to I2C bus 0.
if not cap.begin():
    print('Error initializing MPR121.  Check your wiring!')
    sys.exit(1)

#setup pygame to play sounds
pygame.mixer.init()

masterlist = []
counter = 0

drumlist = []
drumlist.append(pygame.mixer.Sound("sounds/drums/clap.wav")) 	#0
drumlist.append(pygame.mixer.Sound("sounds/drums/crash.wav"))	#1	
drumlist.append(pygame.mixer.Sound("sounds/drums/hat.wav"))	#2
drumlist.append(pygame.mixer.Sound("sounds/drums/hit.wav"))	#3
drumlist.append(pygame.mixer.Sound("sounds/drums/rim.wav"))	#4
drumlist.append(pygame.mixer.Sound("sounds/drums/smash.wav"))	#5
drumlist.append(pygame.mixer.Sound("sounds/drums/thud.wav"))	#6
drumlist.append(pygame.mixer.Sound("sounds/drums/ting.wav"))	#7

pianolist = []
pianolist.append(pygame.mixer.Sound("sounds/piano/39148__jobro__piano-ff-001.wav"))    #0
pianolist.append(pygame.mixer.Sound("sounds/piano/39149__jobro__piano-ff-002.wav"))    #1

masterlist.append(drumlist)
masterlist.append(pianolist)

# Main loop to print a message every time a pin is touched.
print('Press Ctrl-C to quit.')
last_touched = cap.touched()
while True:
    current_touched = cap.touched()
    # Check each pin's last and current state to see if it was pressed or released.
    for i in range(12):
        # Each pin is represented by a bit in the touched value.  A value of 1
        # means the pin is being touched, and 0 means it is not being touched.
        pin_bit = 1 << i
        
        # First check if transitioned from not touched to touched.
        if current_touched & pin_bit and not last_touched & pin_bit:
            print('{0} touched!'.format(i))
            if i == 11:
                if counter < (len(masterlist) - 1):
                    counter = counter + 1
                else:
                    counter = 0
                print('game counter is now {0}'.format(counter))
            
            else:
                if len(masterlist[counter]) >= i:
                    masterlist[counter][i].play()
                else:
                    print("no sound defined for {0} do nothing".format(i))
            
        # Next check if transitioned from touched to not touched.
        if not current_touched & pin_bit and last_touched & pin_bit:
            print('{0} released!'.format(i))
            
    # Update last state and wait a short period before repeating.
    last_touched = current_touched
    time.sleep(0.1)


